import random
import math
import numpy as np
from environment import Agent, Environment
from planner import RoutePlanner
from simulator import Simulator

class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """

    def __init__(self, env, learning=False, epsilon=1.0, alpha=0.5):
        super(LearningAgent, self).__init__(env)     # Set the agent in the evironment
        self.planner = RoutePlanner(self.env, self)  # Create a route planner
        self.valid_actions = self.env.valid_actions  # The set of valid actions

        # Set parameters of the learning agent
        self.learning = learning # Whether the agent is expected to learn
        self.Q = dict()          # Create a Q-table which will be a dictionary of tuples
        self.epsilon = epsilon   # Random exploration factor
        self.alpha = alpha       # Learning factor

        ###########
        ## TO DO ##
        ###########
        # Set any additional class parameters as needed
        self.first_run = True


    def reset(self, destination=None, testing=False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """

        # Select the destination as the new location to route to
        self.planner.route_to(destination)

        ###########
        ## TO DO ##
        ###########
        # Update epsilon using a decay function of your choice
        # Update additional class parameters as needed
        # If 'testing' is True, set epsilon and alpha to 0
        if testing:
            self.epsilon = 0
            self.alpha = 0
        else:
            if self.epsilon == 1 and self.first_run:
                self.first_run = False
                self.trial     = 1
            else:
                self.trial += 1
                self.epsilon = self.epsilon - 0.05    # Decay epsilon linearly
                # self.epsilon = self.epsilon - 0.005    # Decay epsilon linearly
                # self.epsilon = self.epsilon - 0.004    # Decay epsilon linearly
                # self.epsilon = self.epsilon - 0.003    # Decay epsilon linearly
                # Decay function : epsilon =  (1 / (t * t)) ; t = trial number
                # self.epsilon = 1.0 / ( self.trial * self.trial)
                # Decay function : epsilon = a ** (t); a = 0.99
                # self.epsilon =  (0.99) **  self.trial
            if self.epsilon < 0:
                self.epsilon = 0


        return None

    def build_state(self):
        """ The build_state function is called when the agent requests data from the
            environment. The next waypoint, the intersection inputs, and the deadline
            are all features available to the agent. """

        # Collect data about the environment
        waypoint = self.planner.next_waypoint() # The next waypoint
        inputs = self.env.sense(self)           # Visual input - intersection light and traffic
        deadline = self.env.get_deadline(self)  # Remaining deadline

        # print  inputs

        ###########
        ## TO DO ##
        ###########
        # Set 'state' as a tuple of relevant data for the agent
        state =  (waypoint, inputs['left'], inputs['oncoming'], inputs['light'])

        return state


    def get_maxQ(self, state):
        """ The get_max_Q function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. """

        ###########
        ## TO DO ##
        ###########
        # Calculate the maximum Q-value of all actions for a given state

        maxQ = None
        Q_values = self.Q[state]
        for v in Q_values.itervalues():
            if v > maxQ:
                maxQ = v

        return maxQ


    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. """

        ###########
        ## TO DO ##
        ###########
        # When learning, check if the 'state' is not in the Q-table
        # If it is not, create a new dictionary for that state
        #   Then, for each action available, set the initial Q-value to 0.0
        if not state in self.Q:
            Q_values = dict()
            for va in self.valid_actions:
                Q_values[va] = 0
            self.Q[state] = Q_values

        return


    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """

        # Set the agent state and default action
        self.state = state
        self.next_waypoint = self.planner.next_waypoint()
        action = None

        ###########
        ## TO DO ##
        ###########
        # When not learning, choose a random action
        # When learning, choose a random action with 'epsilon' probability
        #   Otherwise, choose an action with the highest Q-value for the current state

        # move this len(self.valid_actions) to __init__
        if not self.learning:
            random_action = random.randint(1, len(self.valid_actions))
            action = self.valid_actions[random_action - 1]
        else:
            # Take random action with epsilon probability
            prob = np.random.choice(2, 1, p=[self.epsilon, 1 - self.epsilon])
            if prob == 0:
                random_action = random.randint(1, len(self.valid_actions))
                action = self.valid_actions[random_action - 1]
            else:
                Q_values = self.Q[state]
                temp_action = None
                max_q_value = None
                for k, v in Q_values.iteritems():
                    if v > max_q_value:
                        temp_action = k
                        max_q_value = v
                action = temp_action

        return action


    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives an award. This function does not consider future rewards
            when conducting learning. """

        ###########
        ## TO DO ##
        ###########
        # When learning, implement the value iteration update rule
        #   Use only the learning rate 'alpha' (do not use the discount factor 'gamma')
        if self.learning:
            # self.Q[state][action] = (self.Q[state][action] + reward) / 2
            self.Q[state][action] = self.Q[state][action] + reward * self.alpha

        return


    def update(self):
        """ The update function is called when a time step is completed in the
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """

        state = self.build_state()          # Get current state
        self.createQ(state)                 # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action) # Receive a reward
        self.learn(state, action, reward)   # Q-learn

        return


def run():
    """ Driving function for running the simulation.
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    env = Environment(verbose=True)

    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    agent = env.create_agent(LearningAgent, learning=True, alpha=0.5)

    ##############
    # Follow the driving agent
    # Flags:
    #   enforce_deadline - set to True to enforce a deadline metric
    env.set_primary_agent(agent, enforce_deadline=True)

    ##############
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled
    #   log_metrics  - set to True to log trial and simulation results to /logs
    #   optimized    - set to True to change the default log file name
    # sim = Simulator(env, update_delay=0.01, display=True, log_metrics=True, optimized=True)
    sim = Simulator(env, update_delay=0.01, display=True, log_metrics=True)

    ##############
    # Run the simulator
    # Flags:
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05
    #   n_test     - discrete number of testing trials to perform, default is 0
    #
    # sim.run(n_test=10)                    # for linear decay function - 0.05 ; F, F
    # sim.run(n_test=10)                    # for linear decay function - 0.05 alpha - 0.3; F, F
    # sim.run(n_test=20, tolerance=0.36)      # for 1/(t*t) decay function
    # sim.run(n_test=20, tolerance=0.000026)  # for a ** t decay function - a = 0.9, ; A+, F
    # sim.run(n_test=20)                     # for a ** t decay function - a = 0.98 ; A+, C
    # sim.run(n_test=20)                     # for a ** t decay function - a = 0.99 ; A+, B
    # sim.run(n_test=20)                    # for linear decay function - 0.005 ; A+, A
    # sim.run(n_test=20)                    # for linear decay function - 0.005, alpha = 0.3 ; A+, A
    # sim.run(n_test=20)                    # for linear decay function - 0.004 ; alpha = 0.5 A+; A
    # sim.run(n_test=20)                    # for linear decay function - 0.004 ; alpha = 0.3 A+; B
    sim.run(n_test=20)                    # for linear decay function - 0.003 ; alpha = 0.3 A+; A

if __name__ == '__main__':
    run()
